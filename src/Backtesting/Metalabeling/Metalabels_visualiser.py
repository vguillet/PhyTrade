
##################################################################################################################
"""
This script is used to visualise metalabels generated by the various metalabels algorithms
"""

# Built-in/Generic Imports
from pylab import *

# Own modules
from src.Backtesting.Metalabeling.Metalabels import MetaLabels
from src.Trade_simulations.Trading_bots.Tradebot_single_ticker import Tradebot
from src.Core_elements.Trading_dataslice import Trading_dataslice
from src.Tools.Plot_tools import Plot_tools

__version__ = '1.1.1'
__author__ = 'Victor Guillet'
__date__ = '10/09/2019'

##################################################################################################################

N = 40
ticker = "AAPL"

data_slice = Trading_dataslice(ticker=ticker,
                               start_date="2000-01-03",
                               subslice_size=2000,
                               subslice_shift_per_step=0,
                               price_data_selection="Close")
# upper_barrier = np.linspace(1, 100, N)
# lower_barrier = np.linspace(1, 100, N)
# look_ahead = np.linspace(1, 200, N)

upper_barrier = 20
lower_barrier = -20
look_ahead = 20

metalabel_settings = 2

# --> Peak-dip metalabel visualisation
# print(MetaLabeling(20, -20, 10, data_slice, metalabel_setting=0).metalabels)
print(Tradebot(daily_values=list(data_slice.subslice_data_selection),
               trade_signal=MetaLabels(upper_barrier=upper_barrier,
                                          lower_barrier=lower_barrier,
                                          look_ahead=look_ahead,
                                          data_slice=data_slice,
                                          metalabel_setting=metalabel_settings).metalabels,
               cash_in_settings=0,
               print_trade_process=False).account.net_worth_history[-1])

plot_tools = Plot_tools()

plot_tools.plot_oc_values(data_slice)
plot_tools.plot_values_trigger(data_slice=data_slice,
                               trade_signal=MetaLabels(upper_barrier=upper_barrier,
                                                       lower_barrier=lower_barrier,
                                                       look_ahead=look_ahead,
                                                       data_slice=data_slice,
                                                       metalabel_setting=metalabel_settings).metalabels)

plt.show()

# print(MetaLabeling(20, -20, 10, data_slice, metalabel_setting=0).metalabels)
#
# plt.plot(range(len(results)), results)
# plt.show()

# --> Simple metalabel visualisation
# xx, yy, zz = np.meshgrid(upper_barrier, lower_barrier, look_ahead)
#
# f = np.zeros_like(xx)
#
# max_val = 0
# max_index = []
#
# for i in range(N):
#     for j in range(N):
#         for k in range(N):
#             h = Tradebot(list(data_slice.sliced_data_selection),
#                             MetaLabeling(upper_barrier[i], lower_barrier[j], look_ahead[k], data_slice, metalabel_setting=1).metalabels,
#                             cash_in_settings=1).account.net_worth_history[-1]
#
#             if h > max_val:
#                 max_val = h
#                 max_index = [upper_barrier[i], lower_barrier[j], look_ahead[k]]
#                 print(max_val)
#
# print(max_val)
# print(max_index)

# fig = plt.figure()
# ax = fig.add_subplot(111, projection='3d')
# ax.scatter(f[:, 0], f[:, 1], f[:, 2])
#
# plt.show()
